name: Deploy

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Deploy to EC2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      - name: Deploy to EC2
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_ACCESS_ID: ${{ secrets.AWS_ACCESS_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          EC2_INSTANCE: ${{ secrets.EC2_INSTANCE }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          set -e
          echo "Starting deployment to EC2..."
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_INSTANCE '
            sudo systemctl start postgresql || true
            export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/productiondb
            cd /home/ubuntu/myproject
            npx prisma migrate deploy --schema=backend/prisma/schema.prisma
            npm run prisma:generate --prefix backend
            npm run seed --prefix backend
            echo "Production DB ready. Deploying app..."
          '
          echo "Deployment to EC2 completed successfully."
      - name: Configure NGINX as reverse proxy
        env:
          EC2_INSTANCE: ${{ secrets.EC2_INSTANCE }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_INSTANCE '
            sudo tee /etc/nginx/sites-available/myproject > /dev/null <<EOF
server {
    listen 80;
    server_name _;
    location /api/ {
        proxy_pass http://localhost:3010/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
    }
    location / {
        proxy_pass http://localhost:3000/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
        try_files \$uri /index.html;
    }
}
EOF
            sudo ln -sf /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled/myproject
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo nginx -t
            sudo systemctl reload nginx
          '
      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::Deployment failed! Notifying team..."
          # Placeholder for Slack/email notification command
      - name: Notify on success
        if: success()
        run: |
          echo "Deployment completed successfully! Notifying team..."
          # Placeholder for Slack/email notification command